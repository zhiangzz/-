要知道如何构造二叉树
class Tree:
  def __init__(self,value):
    self.value = value
    self.left = None
    self.right = None
 遍历
 前序遍历
 后序遍历
 中序遍历
 
 前序遍历：
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        def traversal(root):
            if not root:
                return
            result.append(root.val)
            traversal(root.left)
            traversal(root.right)
        traversal(root)
        return result
  后序遍历：
  # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []

        def traversal(root):
            if not root:
                return 
            traversal(root.left)
            traversal(root.right)
            result.append(root.val)
        traversal(root)
        return result
   中序遍历
   # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        def traverse(root):
            if root==None:
                return
            traverse(root.left)
            res.append(root.val)
            traverse(root.right)
            
        traverse(root)
        return res
