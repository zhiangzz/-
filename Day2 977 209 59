977 双指针
为什么使用双指针？ 因为它的最大值要么是在左边要么是在右边。所以可以使用双指针；且i,j并不是每次都会变化位置的，比较后较大的那个才能变化位置
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        res = [i for i in range(len(nums))]
        k = len(nums) - 1
        i,j = 0, len(nums)-1
        while i<=j:
            if (nums[i]*nums[i])>(nums[j]*nums[j]):
                res[k] = nums[i]*nums[i]
                i += 1
                k -= 1
            else:
                res[k] = nums[j]*nums[j]
                k -= 1
                j -= 1
        return res
 209 滑动窗口，i表示初始位置，j表示终止位置，一旦找到大于target值的，就在里面找小于它的数，他的时间是O(N)因为每个元素进滑动窗口操作一次，出去又操作了一次，因此他的时间是O(2N)，即O（N）。
 class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        res = float("inf") 
        total = 0
        i = 0
        sub = 0
        for j in range(len(nums)):
            total += nums[j]
            while total >= target:
                sub = j-i+1
                res = min(sub,res)
                total -= nums[i]
                i += 1
        return 0 if res==float("inf") else res
      
     59,螺旋矩阵，左闭右开处理,偏移量，以及奇数处理
     class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        nums = [[0] * n for _ in range(n)]
        startx, starty = 0, 0               # 起始点
        loop, mid = n // 2, n // 2          # 迭代次数、n为奇数时，矩阵的中心点
        count = 1                           # 计数

        for offset in range(1, loop + 1) :      # 每循环一层偏移量加1，偏移量从1开始
            for i in range(starty, n - offset) :    # 从左至右，左闭右开
                nums[startx][i] = count
                count += 1
            for i in range(startx, n - offset) :    # 从上至下
                nums[i][n - offset] = count
                count += 1
            for i in range(n - offset, starty, -1) : # 从右至左
                nums[n - offset][i] = count
                count += 1
            for i in range(n - offset, startx, -1) : # 从下至上
                nums[i][starty] = count
                count += 1                
            startx += 1         # 更新起始点
            starty += 1

        if n % 2 != 0 :			# n为奇数时，填充中心点
            nums[mid][mid] = count 
        return nums
