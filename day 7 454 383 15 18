454 四数相加
class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        hashmap = {}
        res = 0
        for i in nums1:
            for j in nums2:
                if i+j in hashmap:
                    hashmap[i+j] += 1
                else:
                    hashmap[i+j] = 1
        for i in nums3:
            for j in nums4:
                if -(i+j) in hashmap:
                    res += hashmap[-(i+j)] 
        return res



383 赎金信
这题目和异位词是一样， 关键是读懂题意，magazine 和 ransonmNote
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        hasharray = [0]*26
        for i in magazine:
            hasharray[ord(i)-ord('a')] += 1
        for j in ransomNote:
            if hasharray[ord(j)-ord('a')] !=0:
                hasharray[ord(j)-ord('a')] -= 1
            else:
                return False
        return True


15 三数之和
此题采用双指针，关键是去重， a的去重，left, right去重，时间复杂度 O（n2)
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        n = len(nums)
        ans = []
        for i in range(n):
            left = i+1
            right = n-1
            if nums[i]>0:
                break
            if i>=1 and nums[i-1] == nums[i]:
                continue
            while left<right:
                total = nums[i]+nums[left]+nums[right]
                if total<0:
                    left += 1
                elif total>0:
                    right -= 1
                else:
                    ans.append([nums[i],nums[left],nums[right]])
                    while left != right and nums[left] == nums[left+1]:
                        left += 1
                    while left != right and nums[right] == nums[right-1]:
                        right -= 1
                    right -= 1
                    left += 1
        return ans
18 四数之和
和三数之和差不多 关键是去重和剪枝
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        n = len(nums)
        res = []
        for i in range(n):
            if i>0 and nums[i]==nums[i-1]:
                continue
            for k in range(i+1,n):
                if k>i+1 and nums[k]==nums[k-1]:
                    continue
                p = k+1
                q = n-1
                while p < q:
                    if nums[i] + nums[k] + nums[p] + nums[q] > target: q -= 1
                    elif nums[i] + nums[k] + nums[p] + nums[q] < target: p += 1
                    else:
                        res.append([nums[i], nums[k], nums[p], nums[q]])
                        while p < q and nums[p] == nums[p + 1]: p += 1
                        while p < q and nums[q] == nums[q - 1]: q -= 1
                        p += 1
                        q -= 1
        return res

